{"version":3,"sources":["../../node_modules/accoutrement/sass/init/_root.scss","screen.css","../../node_modules/accoutrement/sass/init/_a11y.scss","../../node_modules/accoutrement/sass/init/_forms.scss","../../node_modules/accoutrement/sass/init/_media.scss","../../node_modules/accoutrement/sass/init/_typography.scss","initial/_themes.scss","../../node_modules/accoutrement/sass/core/_css-vars.scss","initial/_type.scss","../../node_modules/accoutrement/sass/plugin/type/_fonts.scss","../../node_modules/accoutrement/sass/plugin/type/_a11y.scss","layout/_grid.scss","../../node_modules/accoutrement/sass/plugin/color/_contrast.scss"],"names":[],"mappings":"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","file":"screen.css","sourcesContent":["// Root Init\n// =========\n\n\n/// Prevent iOS and IE text size adjust after device orientation change.\n///\n/// - Overflow-style: Edge 12+, Internet Explorer 11-\n/// @group init-root\nhtml {\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  text-size-adjust: 100%;\n}\n\n\n/// - Android 4.3-\n/// - Internet Explorer 11-\n/// - Windows Phone 8.1+\n/// @group init-root\nmain {\n  display: block;\n}\n\n\n/// - Edge 12+\n/// - Firefox 40+\n/// - Internet Explorer 11-\n/// - Windows Phone 8.1+\n/// @group init-root\ndetails {\n  display: block;\n}\n\n\n/// Internet Explorer 11-\n/// @group init-root\npre {\n  overflow: auto;\n}\n\n\n/// - Internet Explorer 11-\n/// - Windows Phone 8.1+\n/// @group init-root\nprogress {\n  display: inline-block;\n}\n\n\n/// - Firefox 40+\n/// - Internet Explorer 11-\n/// - Windows Phone 8.1+\n/// @group init-root\nsummary {\n  display: block;\n}\n\n\n/// - Android 4.3-\n/// - Internet Explorer 11-\n/// - iOS 7-\n/// - Safari 7-\n/// - Windows Phone 8.1+\n/// @group init-root\ntemplate {\n  display: none;\n}\n\n\n/// Specify the border style, width, and box-sizing of all elements.\n/// @group init-root\n*,\n::before,\n::after {\n  border-style: solid;\n  border-width: 0;\n  box-sizing: border-box;\n}\n\n\n/// Specify the core styles of all elements.\n/// @group init-root\n* {\n  font-size: inherit;\n  line-height: inherit;\n  margin: 0;\n  padding: 0;\n}\n\n\n/// Specify the border styling of tables.\n/// @group init-root\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n","html {\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  text-size-adjust: 100%;\n}\n\nmain {\n  display: block;\n}\n\ndetails {\n  display: block;\n}\n\npre {\n  overflow: auto;\n}\n\nprogress {\n  display: inline-block;\n}\n\nsummary {\n  display: block;\n}\n\ntemplate {\n  display: none;\n}\n\n*,\n::before,\n::after {\n  border-style: solid;\n  border-width: 0;\n  box-sizing: border-box;\n}\n\n* {\n  font-size: inherit;\n  line-height: inherit;\n  margin: 0;\n  padding: 0;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\naudio :not([controls]) {\n  display: none;\n}\n\n[aria-busy=true] {\n  cursor: progress;\n}\n\n[aria-controls] {\n  cursor: pointer;\n}\n\n[aria-disabled] {\n  cursor: default;\n}\n\n[hidden] {\n  display: none;\n}\n\nbutton {\n  overflow: visible;\n}\n\ninput {\n  border-radius: 0;\n  line-height: normal;\n}\n\nbutton,\n[type=button],\n[type=reset],\n[type=submit] {\n  appearance: button;\n  cursor: pointer;\n}\nbutton::-moz-focus-inner,\n[type=button]::-moz-focus-inner,\n[type=reset]::-moz-focus-inner,\n[type=submit]::-moz-focus-inner {\n  border: 0 none !important;\n  padding: 0 !important;\n}\n\n[type=checkbox],\n[type=radio] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n[type=number] {\n  width: auto;\n}\n\n[type=search] {\n  appearance: textfield;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n  background-color: transparent;\n  color: inherit;\n  font-family: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n}\n\ntextarea {\n  overflow: auto;\n  resize: vertical;\n}\n\nimg {\n  border: 0;\n}\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\naudio,\ncanvas,\niframe,\nimg,\nsvg,\nvideo {\n  max-width: 100%;\n  vertical-align: middle;\n}\n\na {\n  background-color: transparent;\n}\na:active, a:hover {\n  outline: 0;\n}\n\nabbr[title] {\n  border-bottom: 1px dotted;\n}\n\nb,\nstrong {\n  font-weight: bold;\n}\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace;\n  font-size: inherit;\n}\n\ndfn {\n  font-style: italic;\n}\n\nnav ol,\nnav ul {\n  list-style: none;\n}\n\nsmall {\n  font-size: 0.75em;\n}\n\nsub,\nsup {\n  font-size: 0.75em;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsup {\n  top: -0.5em;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\n[data-theme=light] {\n  --color-blue-light: #49a6c5;\n  --color-blue-dark: #215869;\n  --color-pink-light: #ff57ab;\n  --color-pink-dark: #b10d65;\n  --color-gray-dark: #3f3f40;\n  --color-gray: #4b4c4d;\n  --color-gray-light: #a3a4a6;\n  --color-contrast-light: #fafcff;\n  --color-contrast-dark: #13323c;\n  --color-added-dark: #3d6644;\n  --color-added-light: #d8eedb;\n  --color-changed-dark: #3e6a79;\n  --color-changed-light: #e0f7ff;\n  --color-removed-dark: #946ca7;\n  --color-removed-light: #d0b9da;\n  --color-background:var(--color-contrast-light, #fafcff);\n  --color-text:var(--color-contrast-dark, #13323c);\n  --color-text-light:var(--color-gray-dark, #3f3f40);\n  --color-border:var(--color-gray, #4b4c4d);\n  --color-border-light:var(--color-gray-light, #a3a4a6);\n  --color-action: #266478;\n  --color-action-hover:var(--color-pink-dark, #b10d65);\n  --color-action-bright: #e60073;\n  --color-graphic-glow:var(--color-blue-light, #49a6c5);\n  --color-graphic-base:var(--color-blue-dark, #215869);\n  --color-added-fg:var(--color-added-dark, #3d6644);\n  --color-added-bg:var(--color-added-light, #d8eedb);\n  --color-changed-fg:var(--color-changed-dark, #3e6a79);\n  --color-changed-bg:var(--color-changed-light, #e0f7ff);\n  --color-removed-fg:var(--color-removed-dark, #946ca7);\n  --color-removed-bg:var(--color-removed-light, #d0b9da);\n}\n[data-theme=light] [data-theme=invert] {\n  --color-background:var(--color-contrast-dark, #13323c);\n  --color-text:var(--color-contrast-light, #fafcff);\n  --color-text-light:var(--color-gray-light, #a3a4a6);\n  --color-border:var(--color-gray-light, #a3a4a6);\n  --color-border-light:var(--color-gray, #4b4c4d);\n  --color-action:var(--color-blue-light, #49a6c5);\n  --color-action-hover:var(--color-pink-light, #ff57ab);\n  --color-action-bright: #e60073;\n  --color-graphic-glow:var(--color-removed-dark, #946ca7);\n  --color-graphic-base:var(--color-removed-light, #d0b9da);\n  --color-added-fg:var(--color-added-light, #d8eedb);\n  --color-added-bg:var(--color-added-dark, #3d6644);\n  --color-changed-fg:var(--color-changed-light, #e0f7ff);\n  --color-changed-bg:var(--color-changed-dark, #3e6a79);\n  --color-removed-fg:var(--color-removed-light, #d0b9da);\n  --color-removed-bg:var(--color-removed-dark, #946ca7);\n}\n\n[data-theme=dark] {\n  --color-blue-light: #49a6c5;\n  --color-blue-dark: #215869;\n  --color-pink-light: #ff57ab;\n  --color-pink-dark: #b10d65;\n  --color-gray-dark: #3f3f40;\n  --color-gray: #4b4c4d;\n  --color-gray-light: #a3a4a6;\n  --color-contrast-light: #fafcff;\n  --color-contrast-dark: #13323c;\n  --color-added-dark: #3d6644;\n  --color-added-light: #d8eedb;\n  --color-changed-dark: #3e6a79;\n  --color-changed-light: #e0f7ff;\n  --color-removed-dark: #946ca7;\n  --color-removed-light: #d0b9da;\n  --color-background:var(--color-contrast-dark, #13323c);\n  --color-text:var(--color-contrast-light, #fafcff);\n  --color-text-light:var(--color-gray-light, #a3a4a6);\n  --color-border:var(--color-gray-light, #a3a4a6);\n  --color-border-light:var(--color-gray, #4b4c4d);\n  --color-action:var(--color-blue-light, #49a6c5);\n  --color-action-hover:var(--color-pink-light, #ff57ab);\n  --color-action-bright: #e60073;\n  --color-graphic-glow:var(--color-removed-dark, #946ca7);\n  --color-graphic-base:var(--color-removed-light, #d0b9da);\n  --color-added-fg:var(--color-added-light, #d8eedb);\n  --color-added-bg:var(--color-added-dark, #3d6644);\n  --color-changed-fg:var(--color-changed-light, #e0f7ff);\n  --color-changed-bg:var(--color-changed-dark, #3e6a79);\n  --color-removed-fg:var(--color-removed-light, #d0b9da);\n  --color-removed-bg:var(--color-removed-dark, #946ca7);\n}\n[data-theme=dark] [data-theme=invert] {\n  --color-background:var(--color-contrast-light, #fafcff);\n  --color-text:var(--color-contrast-dark, #13323c);\n  --color-text-light:var(--color-gray-dark, #3f3f40);\n  --color-border:var(--color-gray, #4b4c4d);\n  --color-border-light:var(--color-gray-light, #a3a4a6);\n  --color-action: #266478;\n  --color-action-hover:var(--color-pink-dark, #b10d65);\n  --color-action-bright: #e60073;\n  --color-graphic-glow:var(--color-blue-light, #49a6c5);\n  --color-graphic-base:var(--color-blue-dark, #215869);\n  --color-added-fg:var(--color-added-dark, #3d6644);\n  --color-added-bg:var(--color-added-light, #d8eedb);\n  --color-changed-fg:var(--color-changed-dark, #3e6a79);\n  --color-changed-bg:var(--color-changed-light, #e0f7ff);\n  --color-removed-fg:var(--color-removed-dark, #946ca7);\n  --color-removed-bg:var(--color-removed-light, #d0b9da);\n}\n\n[data-theme] {\n  background-color: var(--color-background, #fafcff);\n  color: var(--color-text, #13323c);\n}\n\n:root {\n  font-family: freight-text-pro, Baskerville, Palatino, Cambria, Georgia, serif;\n  font-size: calc(16px + 0.25vw);\n  line-height: 1.6;\n}\n\nh1,\nh2,\nh3 {\n  font-family: freight-sans-pro, \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n}\n\nh2 {\n  font-size: calc(1.2649110641rem + 0.75vw);\n  line-height: 1.2;\n}\n\nh3 {\n  font-size: 1.2649110641rem;\n}\n\np {\n  margin-bottom: 1.6rem;\n}\n\na:link, a:visited {\n  color: var(--color-action, #266478);\n}\na:hover, a:focus, a:active {\n  color: var(--color-action-hover, #b10d65);\n}\n\n.amp {\n  font-family: BaskervilleAmp, Baskerville, \"Goudy Old Style\", Palatino, \"Book Antiqua\", serif;\n  font-style: italic;\n}\n\n.is-hidden {\n  clip: rect(1px, 1px, 1px, 1px);\n  clip-path: inset(1px 1px 1px 1px);\n  height: 1px;\n  overflow: hidden;\n  pointer-events: none;\n  position: absolute;\n  width: 1px;\n}\n\n:root {\n  --color-blue-light: #49a6c5;\n  --color-blue-dark: #215869;\n  --color-pink-light: #ff57ab;\n  --color-pink-dark: #b10d65;\n  --color-gray-dark: #3f3f40;\n  --color-gray: #4b4c4d;\n  --color-gray-light: #a3a4a6;\n  --color-contrast-light: #fafcff;\n  --color-contrast-dark: #13323c;\n  --color-added-dark: #3d6644;\n  --color-added-light: #d8eedb;\n  --color-changed-dark: #3e6a79;\n  --color-changed-light: #e0f7ff;\n  --color-removed-dark: #946ca7;\n  --color-removed-light: #d0b9da;\n  --color-background:var(--color-contrast-light, #fafcff);\n  --color-text:var(--color-contrast-dark, #13323c);\n  --color-text-light:var(--color-gray-dark, #3f3f40);\n  --color-border:var(--color-gray, #4b4c4d);\n  --color-border-light:var(--color-gray-light, #a3a4a6);\n  --color-action: #266478;\n  --color-action-hover:var(--color-pink-dark, #b10d65);\n  --color-action-bright: #e60073;\n  --color-graphic-glow:var(--color-blue-light, #49a6c5);\n  --color-graphic-base:var(--color-blue-dark, #215869);\n  --color-added-fg:var(--color-added-dark, #3d6644);\n  --color-added-bg:var(--color-added-light, #d8eedb);\n  --color-changed-fg:var(--color-changed-dark, #3e6a79);\n  --color-changed-bg:var(--color-changed-light, #e0f7ff);\n  --color-removed-fg:var(--color-removed-dark, #946ca7);\n  --color-removed-bg:var(--color-removed-light, #d0b9da);\n  background-color: var(--color-background, #fafcff);\n  color: var(--color-contrast-dark, #13323c);\n}\n\n[data-layout=grid] {\n  box-shadow: 0 0 0.8rem var(--color-border, #4b4c4d);\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  margin: 0 auto;\n  max-width: 40em;\n  min-height: 100vh;\n  padding: 1em;\n}","// Accessibility Init\n// ==================\n\n\n/// Chrome 44-, iOS 8+, Safari 9+\n/// @group init-a11y\naudio {\n  :not([controls]) {\n    display: none;\n  }\n}\n\n\n/// Specify the progress cursor of updating elements.\n/// @group init-a11y\n[aria-busy='true'] {\n  cursor: progress;\n}\n\n\n/// Specify the pointer cursor of trigger elements.\n/// @group init-a11y\n[aria-controls] {\n  cursor: pointer;\n}\n\n\n/// Specify the unstyled cursor of disabled,\n/// not-editable, or otherwise inoperable elements.\n/// @group init-a11y\n[aria-disabled] {\n  cursor: default;\n}\n\n\n/// Internet Explorer 10-\n/// @group init-a11y\n[hidden] {\n  display: none;\n}\n","// Forms Init\n// ==========\n\n\n/// Internet Explorer 11-\n/// @group init-forms\nbutton {\n  overflow: visible;\n}\n\n\n/// - Border-radius: iOS 8+ |\n/// - Line-height: Firefox 4+\n/// @group init-forms\ninput {\n  border-radius: 0;\n  line-height: normal;\n}\n\n\n// stylelint-disable declaration-no-important\n/// Appearance, cursors, and inner-focus\n/// for buttons and button-like inputs.\n///\n/// - Appearance: iOS 8+\n/// @group init-forms\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  appearance: button;\n  cursor: pointer;\n\n  &::-moz-focus-inner {\n    border: 0 none !important;\n    padding: 0 !important;\n  }\n}\n// stylelint-enable\n\n\n/// Address box sizing set to `content-box` in IE 8/9/10.\n/// Remove excess padding in IE 8/9/10.\n/// @group init-forms\n[type='checkbox'],\n[type='radio'] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n\n/// Firefox 36+\n/// @group init-forms\n[type='number'] {\n  width: auto;\n}\n\n\n/// Chrome 45+, Safari 9+\n/// @group init-forms\n[type='search'] {\n  appearance: textfield;\n}\n\n\n/// Specify the background-color,\n/// and the inherited color/font of form elements.\n/// @group init-forms\nbutton,\ninput,\nselect,\ntextarea {\n  background-color: transparent;\n  color: inherit;\n  font-family: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n}\n\n\n/// Remove default vertical scrollbar in IE 8/9/10/11,\n/// and specify the resizability of textareas.\n/// @group init-forms\ntextarea {\n  overflow: auto;\n  resize: vertical;\n}\n","// Media Init\n// ==========\n\n\n/// Remove border when inside `a` element in IE 8/9/10.\n/// @group init-media\nimg {\n  border: 0;\n}\n\n\n/// Internet Explorer 11-\n/// @group init-media\nsvg {\n  &:not(:root) {\n    overflow: hidden;\n  }\n}\n\n\n/// Specify the alignment of media elements.\n/// @group init-media\naudio,\ncanvas,\niframe,\nimg,\nsvg,\nvideo {\n  max-width: 100%;\n  vertical-align: middle;\n}\n","// Typography Init\n// ===============\n\n\n/// Remove the gray background color from active links in IE 10.\n/// Improve readability of focused elements\n/// when they are also in an active/hover state.\n/// @group init-type\na {\n  background-color: transparent;\n\n  &:active,\n  &:hover {\n    outline: 0;\n  }\n}\n\n\n/// Address styling not present in IE 8/9/10/11, Safari, and Chrome.\n/// @group init-type\nabbr {\n  &[title] {\n    border-bottom: 1px dotted;\n  }\n}\n\n\n/// Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\n/// @group init-type\nb,\nstrong {\n  font-weight: bold;\n}\n\n\n/// Specify the font family of code elements.\n/// @group init-type\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace;\n  font-size: inherit;\n}\n\n\n/// Address styling not present in Safari and Chrome.\n/// @group init-type\ndfn {\n  font-style: italic;\n}\n\n\n/// Remove list style of nav lists.\n/// @group init-type\nnav {\n  ol,\n  ul {\n    list-style: none;\n  }\n}\n\n\n/// All browsers…\n/// @group init-type\nsmall {\n  font-size: 0.75em;\n}\n\n\n/// Prevent `sub` and `sup` affecting `line-height` in all browsers.\n/// @group init-type\nsub,\nsup {\n  font-size: 0.75em;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\n\n/// Move super-script up.\n/// @group init-type\nsup {\n  top: -0.5em;\n}\n\n\n/// Move sub-script down.\n/// @group init-type\nsub {\n  bottom: -0.25em;\n}\n","// Themes\n// ======\n\n$themes: (\n  'light': $colors,\n  'dark': $dark-colors,\n);\n\n$invert: (\n  'light': (\n    'keys': map-keys($dark-theme),\n    'colors': $dark-colors,\n  ),\n  'dark': (\n    'keys': map-keys($light-theme),\n    'colors': $colors,\n  ),\n);\n\n@each $name, $theme in $themes {\n  [data-theme='#{$name}'] {\n    @include colors--($theme);\n\n    [data-theme='invert'] {\n      $use: map-get($invert, $name);\n      @each $key in map-get($use, 'keys') {\n        @include color--($key, $source: map-get($use, 'colors'));\n      }\n    }\n  }\n}\n\n[data-theme] {\n  background-color: var-color('background');\n  color: var-color('text');\n}\n","/// # Tokens » CSS Variables\n/// *aka \"Custom Properties\"*\n///\n/// CSS variables are a useful way to manage\n/// values that might change in relation to the DOM –\n/// something that Sass variables cannot do.\n/// In many cases,\n/// we find it helpful to manage variables in Sass,\n/// and output CSS properties as-needed.\n/// These tools help integrate Accoutrement map values\n/// with CSS variables\n/// to keep that relationship intact.\n///\n/// The Core feature provides generic variable logic,\n/// while each plugin provides specialized shortcuts\n/// for maintaining:\n/// - [time](animate-time-vars.html) variables\n/// - [easing](animate-ease-vars.html) variables\n/// - [change](animate-change-vars.html) variables\n/// - [color](color-vars.html), variables\n/// - [scale](scale-vars.html) variables\n/// - [font](type-font-vars.html) variables\n///\n/// Some of the use-cases covered here\n/// can be written more simply in pure CSS.\n/// but these tools provide two main advantages:\n/// - Core logic allows plugins to build additional shortcuts\n/// - Explicit relationships make code more meaningful\n/// @group core-vars\n\n\n// Var Name\n// --------\n/// Formats a token name as a CSS variable (custom property),\n/// with optional prefix\n///\n/// @since 2.0.0 -\n/// - NEW: Initial release\n///\n/// @access private\n///\n/// @param {string} $name -\n///   The name of the token to be used as a variable\n/// @param {string | null} $prefix [null] -\n///   Optional prefix added to the token name\n@function _a_var-name(\n  $name,\n  $prefix: null\n) {\n  $string: unquote('--#{$prefix}#{$name}');\n  $string: _a_str-replace($string, ' ', '-', 'all');\n  @return $string;\n}\n\n\n// Tokens--\n// --------\n/// Convert any Accoutrement map\n/// into CSS custom properties (aka variables).\n///\n/// - Token names that start with `_` or `-` are considered \"private\"\n///   and will not be output as variables\n/// - Tokens that contain a simple alias with no adjustments\n///   will be output with a `var()` value,\n///   keeping the alias relationship intact\n///\n/// @since 2.0.0 -\n/// - NEW: Initial release\n///\n/// @group core-vars\n/// @example scss\n///   $colors: (\n///     '_brand': hsl(120, 50%, 50%),\n///     'text': '#_brand' ('shade': 50%),\n///     'border': '#text',\n///   );\n///   :root {\n///     @include tokens--($colors, 'color-');\n///   }\n///\n/// @param {map} $map -\n///   Accoutrement map of tokens to set as css variables\n/// @param {string | null} $prefix [null] -\n///   Optional prefix for naming token variables\n/// @output\n///   Custom properties for all public tokens in the map\n@mixin tokens--(\n  $map,\n  $prefix: null\n) {\n  @each $token in map-keys($map) {\n    @if not is-private-token($token) {\n      @include token--($map, $token, $prefix: $prefix);\n    }\n  }\n}\n\n\n// Token--\n// -------\n/// Set a single custom property based on a map-token,\n/// with optional alias, fallback, and prefixing\n///\n/// @since 2.0.0 -\n/// - NEW: Initial release\n///\n/// @group core-vars\n/// @example scss\n///   $colors: (\n///     '_brand': hsl(120, 50%, 50%),\n///     'text': '#_brand' ('shade': 50%),\n///     'border': '#text',\n///   );\n///   .example {\n///     @include token--($colors, 'border');\n///     @include token--($colors, 'outline', 'border', red);\n///   }\n///\n/// @param {map} $map -\n///   Accoutrement map of tokens to use as source\n/// @param {*} $token -\n///   Token name available in the source `$map`\n/// @param {string | null} $value [null] -\n///   Optional new value for the given token\n/// @param {*} $fallback [true] -\n///   The optional fallback value for a `var()` function:\n///   - `true` will generate a fallback based on the token value\n///   - A token name will fallback to the value of that\n///     css-variable and then to the token's calculated value\n///   - Any other fallback will be passed through unchanged\n/// @param {string | null} $prefix [null] -\n///   Optional prefix used for naming token variables\n@mixin token--(\n  $map,\n  $token,\n  $value: null,\n  $fallback: true,\n  $prefix: null\n) {\n  $prop: _a_var-name($token, $prefix);\n  $val: $value or $token;\n  $ref: $value or is-alias-for($map, $val);\n\n  @if ($ref) {\n    $val: var-token($map, $ref, $fallback, $prefix);\n  } @else {\n    $val: get-token($map, $val);\n  }\n\n  #{$prop}: $val;\n}\n\n\n// Var Token\n// ---------\n/// Access the CSS variable associated with a given token,\n/// along with a fallback value based on the token itself\n///\n/// @since 2.0.0 -\n/// - NEW: Initial release\n///\n/// @group core-vars\n/// @example scss\n///   $colors: (\n///     '_brand': hsl(120, 50%, 50%),\n///     'text': '#_brand' ('shade': 50%),\n///     'border': '#text',\n///   );\n///   .example {\n///     border-color: var-token($colors, 'border');\n///     color: var-token($colors, 'text', black);\n///   }\n///\n/// @param {map} $map -\n///   Accoutrement map of tokens to use as source\n/// @param {*} $token -\n///   Token name available in the source `$map`\n/// @param {*} $fallback [true] -\n///   The optional fallback value for a `var()` function:\n///   - `true` will try to generate a fallback based on the color value\n///   - A color name will fallback to the value of that\n///     css-variable and then to the color's calculated value\n///   - Any other fallback will be passed through unchanged\n/// @param {string | null} $prefix [null] -\n///   Optional prefix used for naming token variables\n/// @return {string} -\n///   CSS variable call, in the format:\n///   `var(--<color>, <fallback>)`\n@function var-token(\n  $map,\n  $token,\n  $fallback: true,\n  $prefix: null\n) {\n  $var: _a_var-name($token, $prefix);\n\n  @if ($fallback == true) {\n    @if map-has-key($map, $token) {\n      @return var($var, get-token($map, $token));\n    }\n  } @else if map-has-key($map, $fallback) {\n    @return var($var, var-token($map, $fallback, true, $prefix));\n  } @else if $fallback {\n    @return var($var, $fallback);\n  }\n\n  @return var($var);\n}\n","// Type\n// ====\n\n:root {\n  @include font-family('body');\n  font-size: size('responsive');\n  line-height: ratio('text-ratio');\n}\n\nh1,\nh2,\nh3 {\n  @include font-family('alt');\n}\n\nh2 {\n  font-size: size('xlarge');\n  line-height: 1.2;\n}\n\nh3 {\n  font-size: size('large');\n}\n\np {\n  margin-bottom: size('gutter');\n}\n\n\n// Links\n// -----\n\na {\n  #{$link} {\n    color: var-color('action');\n  }\n\n  #{$focus} {\n    color: var-color('action-hover');\n  }\n}\n\n\n// Special\n// -------\n\n.amp {\n  @include font-family('amp');\n  font-style: italic;\n}\n\n.is-hidden {\n  @include is-hidden;\n}\n","/// ### Using WebFonts\n///\n/// Once you've configured your webfont data into a map,\n/// these tools will help you access the data in various ways:\n/// from creating `@font-face` imports,\n/// to calling font-families by any given alias.\n///\n/// @group type-fonts\n\n\n// Font [function]\n// ---------------\n/// Retrieve and normalize font data from the `$fonts` map\n///\n/// @since 2.0.0 -\n/// - BREAKING: Non-map fonts are interpreted as font-stacks\n/// - BREAKING: Normalized font-data uses proper name-quotation,\n///   and ignores missing or private names/stacks\n/// @since 1.0.0 -\n/// - NEW: Provided to access and normalize a map of font data\n///   for any key in your global `$fonts` map\n/// - NEW: Accepts `$source` map argument,\n///   for custom source-palette\n///\n/// @group type-fonts\n/// @param {*} $font -\n///   A key for accessing the desired font in `$fonts`\n/// @param {map} $source [$fonts] -\n///   Optional accoutrement-format map of fonts\n///   to use as the origin palette\n/// @return {map} -\n///   A parsed and normalized map of font-data\n@function font(\n  $font,\n  $source: $fonts\n) {\n  $data: get-token($source, $font);\n  $normal: _a_normalize-font($data, $font, $source);\n  @return $normal;\n}\n\n\n// Font-URL [function]\n// -------------------\n/// This is a wrapper for the CSS `url()` function,\n/// which simply prepends the global `$font-path` when appropriate.\n///\n/// @since type-4.0.0 -\n/// - BUGFIX: Supports Base64 data URI's, without prepending font-path\n///\n/// @group type-fonts\n/// @example scss\n///   $font-path: '../fonts/';\n///   $src: font-url('sans/my-sans-font.woff2');\n///   /* #{$src} */\n///\n/// @param {string} $path -\n///   A path relative to the fonts directory.\n/// @return {string} -\n///   The full path to a font file, in CSS `url('my/path')` format.\n@function font-url(\n  $path\n) {\n  @if not str-index($path, 'data:') {\n    $path: $font-path + $path;\n  }\n\n  @return url(quote($path)); // stylelint-disable-line function-url-quotes\n}\n\n\n// Font Family [function]\n// ----------------------\n/// Access a font-family from your `$fonts` map,\n/// with name and font-stack.\n///\n/// @since 1.0.0 -\n/// - NEW: Accepts `$source` map argument,\n///   for custom source-palette\n/// @since type-4.0.0 -\n/// - BUGFIX: Provides the correct name for fonts when an alias is given\n///\n/// @group type-fonts\n/// @example scss\n///   $fonts: (\n///     'sans': (\n///       'name': 'FranklinGothic',\n///       'stack': (Helvetica, Arial, sans-serif),\n///     ),\n///   );\n///\n///   html {\n///     font-family: font-family('sans');\n///   }\n///\n/// @param {string} $key -\n///   The key-name of a font in your `$fonts` map.\n/// @param {map} $source [$fonts] -\n///   Optional accoutrement-format map of fonts\n///   to use as the origin palette\n/// @return {String} -\n///   The full font-stack for the given font,\n///   ready for output with the `font-family` property.\n@function font-family(\n  $key,\n  $source: $fonts\n) {\n  $font: font($key, $source);\n  @return map-get($font, 'stack');\n}\n\n\n// Font Family [mixin]\n// -------------------\n/// Output a font-stack to font-family based on your `$fonts` configuration.\n///\n/// @since 1.0.0 -\n/// - NEW: Accepts `$source` map argument,\n///   for custom source-palette\n///\n/// @group type-fonts\n/// @example scss\n///   $fonts: (\n///     'FranklinGothic': (\n///       'stack': (Helvetica, Arial, sans-serif),\n///     ),\n///     'sans': '#FranklinGothic',\n///   );\n///\n///   html {\n///     @include font-family('sans');\n///   }\n///\n/// @param {string} $key -\n///   The key-name of a font in your `$fonts` map.\n/// @param {map} $source [$fonts] -\n///   Optional accoutrement-format map of fonts\n///   to use as the origin palette\n@mixin font-family(\n  $key,\n  $source: $fonts\n) {\n  font-family: font-family($key, $source);\n}\n\n\n// Font Face [mixin]\n// -----------------\n/// Import any local webfont defined in your `$fonts` configuration\n/// (variants without a path will not be imported).\n///\n/// @since 1.0.0 -\n/// - NEW: Accepts `$source` map argument,\n///   for custom source-palette\n/// @since type-4.0.0 -\n/// - BREAKING: No longer accepts the `$formats` parameter\n///\n/// @group type-fonts\n/// @example scss\n///   $fonts: (\n///     'body-font': (\n///       'name': 'Source Sans Pro',\n///       'formats': 'woff2' 'woff' 'eot',\n///       'normal': 'sans/sourcesanspro-regular-webfont',\n///       'italic': 'sans/sourcesanspro-italic-webfont',\n///       'bold': 'sans/sourcesanspro-bold-webfont',\n///     ),\n///   );\n///   @include font-face('body-font');\n///\n/// @param {string} $key -\n///   The key-name of a font in your `$fonts` map\n/// @param {map} $source [$fonts] -\n///   Optional accoutrement-format map of fonts\n///   to use as the origin palette\n/// @output `@font-face` import blocks for any defined font-variants.\n@mixin font-face(\n  $key,\n  $source: $fonts\n) {\n  $font: font($key, $source);\n  $variants: _a_font-get-variants($font);\n  $name: map-get($font, 'name');\n\n  @if (length($variants) > 0) {\n    $unicode: map-get($font, 'unicode-range');\n\n    @each $variant, $data in $variants {\n      $weight: nth($variant, 1);\n      $style: nth($variant, 2);\n      @include _a_import-font-face($name, $weight, $style, $data, $unicode);\n    }\n  }\n}\n\n\n// Import WebFonts [mixin]\n// -----------------------\n/// Find all the fonts that include data for imports,\n/// and generate `@font-face` blocks for each individual font and variant.\n///\n/// @since 2.0.0 -\n/// - NEW: Accepts `$source` parameter,\n///   which uses global `$fonts` by default\n/// - BREAKING: No longer imports private fonts,\n///   but will import a direct alias of the private font\n/// @since 1.0.0 -\n/// - BREAKING: No longer accepts the `$fonts` parameter\n/// @since type-4.0.0 -\n/// - BREAKING: No longer accepts the `$formats` parameter\n///\n/// @group type-fonts\n/// @example scss\n///   $fonts: (\n///     'body-font': (\n///       'name': 'Source Sans Pro',\n///       'formats': 'woff2' 'woff' 'eot',\n///       'normal': 'sans/sourcesanspro-regular-webfont',\n///       'italic': 'sans/sourcesanspro-italic-webfont',\n///       'bold': 'sans/sourcesanspro-bold-webfont',\n///     ),\n///     // alias keys, and fonts without path data will be ignored…\n///     'alias': '#body-font',\n///     'google-font': (\n///       'source': 'http://fonts.google.com/',\n///     ),\n///   );\n///   @include import-webfonts;\n///\n/// @param {map} $source [$fonts] -\n///   Optional accoutrement-format map of fonts\n///   to use as the origin palette\n/// @output Any number of `@font-face` blocks.\n@mixin import-webfonts(\n  $source: $fonts\n) {\n  @each $key, $font in $source {\n    @if not is-alias-for($source, $key) and not is-private-token($key) {\n      @include font-face($key);\n    }\n  }\n}\n","// Hidden\n// ======\n\n\n/// # Accessibility\n///\n/// A simple set of utilities\n/// for handling text-visibility\n/// and screen-reader accessibility\n/// across your site.\n///\n/// @group type-a11y\n\n\n// Is Hidden\n// ---------\n/// Hide an element using either the `clip` or `position` method.\n/// @group type-a11y\n/// @param {'clip' | 'position'} $method ['clip'] -\n///   The hiding method to use.\n@mixin is-hidden(\n  $method: 'clip'\n) {\n  @if $method == 'position' {\n    @include _a_is-hidden--position;\n  } @else {\n    @include _a_is-hidden--clip;\n  }\n}\n\n\n// Is Hidden -- Position\n// ---------------------\n/// Hide an element by positioning it off the page.\n/// @group type-a11y\n/// @access private\n@mixin _a_is-hidden--position {\n  left: -9999px;\n  pointer-events: none;\n  position: absolute;\n  top: -9999px;\n}\n\n\n// Is Hidden -- Clip\n// -----------------\n/// Hide an element by clipping it in place.\n/// @group type-a11y\n/// @access private\n@mixin _a_is-hidden--clip {\n  clip: rect(1px, 1px, 1px, 1px);\n  clip-path: inset(1px 1px 1px 1px);\n  height: 1px;\n  overflow: hidden;\n  pointer-events: none;\n  position: absolute;\n  width: 1px;\n}\n\n\n","// Grid Layout\n// ===========\n\n:root {\n  @include colors--();\n  @include var-contrasted('background');\n}\n\n[data-layout=\"grid\"] {\n  box-shadow: 0 0 size('shim') var-color('border');\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  margin: 0 auto;\n  max-width: 40em;\n  min-height: 100vh;\n  padding: 1em;\n}\n","/// # Contrast & Accessibility\n/// @group color-contrast\n\n\n// WCAG Contrast\n// -------------\n/// These named contrast-ratios are defined by the [WCAG][WCAG].\n///\n/// [WCAG]: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast\n///\n/// @access private\n$WCAG-CONTRAST: (\n  'AA-large': 3,\n  'AA': 4.5,\n  'AAA': 7,\n);\n\n\n// Contrast\n// --------\n/// For any color, select the best contrast among a set of options.\n/// For best results, pass in a combination of light and dark colors\n/// to contrast against – \n/// or define default `contrast-light` and `contrast-dark` values\n/// (with or without a private `_` prefix)\n/// in your global `$colors` map.\n///\n/// @group color-contrast\n/// @example scss - max contrast\n///   $colors: (\n///     'background': blue,\n///     'light': #eee,\n///     'dark': #111,\n///   );\n///   html {\n///     color: contrast(\n///       'background',\n///       'light', 'dark', black, white\n///     );\n///   }\n/// @example scss - min contrast\n///   $colors: (\n///     'background': blue,\n///     'light': #eee,\n///     'dark': #111,\n///   );\n///   html {\n///     color: contrast(\n///       'background',\n///       'light', 'dark', black, white,\n///       'AAA'\n///     );\n///   }\n///\n/// @param {string | list} $color -\n///   The name or value of a color.\n/// @param {colors | min-contrast} $options... -\n///   List of colors to contrast against.\n///   This function will choose the best contrast\n///   of all the options provided,\n///   or the `contrast-light` and `contrast-dark` defaults\n///   defined in your color palette or the factory settings.\n///\n///   - Any  `{'AA' | 'AA-large' | 'AAA' | 0-21 }` values\n///     will be treated as a minimum color-contrast ratio –\n///     and will return the minimum accessible option,\n///     rather than the maximum contrast.\n/// @return {color} -\n///   Whichever color-option has the highest contrast-ratio to `$color`,\n///   or the minimum needed contrast to meet a given accessibility ratio.\n@function contrast(\n  $color,\n  $options...\n) {\n  @return _a_best-contrast($color, $options, 'color');\n}\n@include _a_register-function('contrast');\n\n\n// Var-Contrast\n// ------------\n/// An extension of the `contrast` function,\n/// designed to output CSS variables\n/// rather than simple color values.\n///\n/// @group color-contrast\n/// @since 2.1.0 -\n/// - NEW: Provides access to contrast colors as CSS-variables, when defined\n/// @example scss - max contrast / no variable names\n///   $colors: (\n///     'background': blue,\n///     'light': #eee,\n///     'dark': #111,\n///   );\n///   html {\n///     color: var-contrast(\n///       'background',\n///       'light', 'dark', black, white\n///     );\n///   }\n/// @example scss - min contrast / variable names\n///   $colors: (\n///     'background': blue,\n///     'light': #eee,\n///     'dark': #111,\n///   );\n///   html {\n///     color: var-contrast(\n///       'background',\n///       'light', 'dark', black, white,\n///       'AAA'\n///     );\n///   }\n///\n/// @param {string | list} $color -\n///   The name or value of a color.\n/// @param {colors | min-contrast} $options... -\n///   List of colors to contrast against.\n///   This function will choose the best contrast\n///   of all the options provided,\n///   or the `contrast-light` and `contrast-dark` defaults\n///   defined in your color palette or the factory settings.\n///\n///   - Any  `{'AA' | 'AA-large' | 'AAA' | 0-21 }` values\n///     will be treated as a minimum color-contrast ratio –\n///     and will return the minimum accessible option,\n///     rather than the maximum contrast.\n/// @return {color | var()} -\n///   CSS Variable for the color-option\n///   that has the highest contrast-ratio to `$color`,\n///   or the color if no variable exists.\n@function var-contrast(\n  $color,\n  $options...\n  ) {\n  $contrast: _a_best-contrast($color, $options);\n  $name: map-get($contrast, 'name');\n  $color: map-get($contrast, 'color');\n\n  @if ($name != $color) and not is-private-token($name) {\n    $name: _a_var-name($name, $color-var-prefix);\n    @return var($name, $color);\n  }\n\n  @return $color;\n}\n@include _a_register-function('var-contrast');\n\n\n// Contrasted\n// ----------\n/// Apply any background color,\n/// along with the highest-contrast text color from a set of options.\n/// This works the same as the `contrast` function,\n/// but applies the resulting values to `background-color`\n/// and text `color` properties.\n///\n/// @group color-contrast\n/// @example scss - max contrast\n///   $colors: (\n///     'background': blue,\n///     'light': #eee,\n///     'dark': #111,\n///   );\n///   html {\n///     @include contrasted(\n///       'background',\n///       'light', 'dark', black, white\n///     );\n///   }\n/// @example scss - min contrast\n///   $colors: (\n///     'background': blue,\n///     'light': #eee,\n///     'dark': #111,\n///   );\n///   html {\n///     @include contrasted(\n///       'background',\n///       'light', 'dark', black, white,\n///       'AAA'\n///     );\n///   }\n///\n/// @param {string | list} $background -\n///   The name or value of your desired background color.\n/// @param {colors | min-contrast} $options... -\n///   List of colors to contrast against.\n///   This function will choose the best contrast\n///   of all the options provided,\n///   or the `contrast-light` and `contrast-dark` defaults\n///   defined in your color palette or the factory settings.\n///\n///   - Any  `{'AA' | 'AA-large' | 'AAA' | 0-21 }` values\n///     will be treated as a minimum color-contrast ratio –\n///     and will return the minimum accessible option,\n///     rather than the maximum contrast.\n/// @output -\n///   Sets the `background-color` to `$background`\n///   and `color` to the option with\n///   highest contrast against that background,\n///   or minimum contrast that still meets a given accessibility ratio.\n@mixin contrasted(\n  $background,\n  $options...\n) {\n  $background: color($background);\n\n  background-color: $background;\n  color: contrast($background, $options...);\n}\n\n\n// Var Contrasted\n// --------------\n/// Apply any background color as a CSS variable,\n/// along with the highest-contrast text color from a set of options.\n/// This works the same as the `var-contrast` function,\n/// but applies the resulting values to `background-color`\n/// and text `color` properties.\n///\n/// @group color-contrast\n/// @since 2.1.0 -\n/// - NEW: Applies contrasting colors as CSS-variables, when defined\n/// @example scss - max contrast\n///   $colors: (\n///     'background': blue,\n///     'light': #eee,\n///     'dark': #111,\n///   );\n///   html {\n///     @include var-contrasted(\n///       'background',\n///       'light', 'dark', black, white\n///     );\n///   }\n/// @example scss - min contrast\n///   $colors: (\n///     'background': blue,\n///     'light': #eee,\n///     'dark': #111,\n///   );\n///   html {\n///     @include var-contrasted(\n///       'background',\n///       'light', 'dark', black, white,\n///       'AAA'\n///     );\n///   }\n///\n/// @param {string | list} $background -\n///   The name or value of your desired background color.\n/// @param {colors | min-contrast} $options... -\n///   List of colors to contrast against.\n///   This function will choose the best contrast\n///   of all the options provided,\n///   or the `contrast-light` and `contrast-dark` defaults\n///   defined in your color palette or the factory settings.\n///\n///   - Any  `{'AA' | 'AA-large' | 'AAA' | 0-21 }` values\n///     will be treated as a minimum color-contrast ratio –\n///     and will return the minimum accessible option,\n///     rather than the maximum contrast.\n/// @output -\n///   Sets the `background-color` to `$background`\n///   and the foreground `color` to\n///   whichever option has better contrast against the given background.\n@mixin var-contrasted(\n  $background,\n  $options...\n) {\n  background-color: var-color($background);\n  color: var-contrast($background, $options...);\n}\n\n\n// Contrast Ratio\n// --------------\n/// Compare two colors using the WCAG comparison algorithm,\n/// and return the resulting contrast-ratio.\n/// Optionally pass in a standard (AA, AAA, AA-large)\n/// and return `false` when the contrast-check fails.\n///\n/// - 'AA-large' == `3:1`\n/// - 'AA' == `4.5:1`\n/// - 'AAA' == `7:1`\n///\n/// @group color-contrast\n/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef WCAG Contrast Definition\n/// @example scss\n///   /* black and white: #{contrast-ratio(white, black)} */\n///   /* failed 'AAA': #{contrast-ratio(white, #999, 'AAA')} */\n///\n/// @param {string | list | number} $color -\n///   The name of a color in your palette,\n///   any other color value,\n///   or even a pre-calculated numeric luminance.\n/// @param {string | list | number} $contrast -\n///   The name or value of a color to contrast against the first.\n/// @param {'AA' | 'AA-large' | 'AAA' | number | false} $require [false] -\n///   An optional WCAG contrast ratio to require.\n///   The function will return `false` if the required ratio is not met.\n/// @return {number} -\n///   The WCAG-defined contrast-ratio of two colors.\n@function contrast-ratio(\n  $base,\n  $contrast,\n  $require: false\n) {\n  $is-lumins: (type-of($base) == 'number');\n\n  $base-lumin: if($is-lumins, $base, luminance($base));\n  $contrast-lumin: if($is-lumins, $contrast, luminance($contrast));\n\n  $darker: min($base-lumin, $contrast-lumin);\n  $lighter: max($base-lumin, $contrast-lumin);\n\n  $ratio: ($lighter + 0.05) / ($darker + 0.05);\n\n  $require: _a_valid-contrast($require);\n\n  @if $require and ($ratio < $require) {\n    @return false;\n  }\n\n  @return $ratio;\n}\n\n\n// Luminance\n// ---------\n/// Get the WCAG luminance of a color in your palette.\n///\n/// @group color-contrast\n/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef WCAG Relative Luminance\n///\n/// @param {string | list} $color -\n///   The name or value of a color.\n/// @return {number} -\n///   WCAG-defined numeric luminance value.\n@function luminance(\n  $color\n) {\n  $color: color($color);\n  $color: _a_type-check($color, 'color', 'luminance', '$color');\n  $luminance: 0;\n\n  @each $component in 'red' 'green' 'blue' {\n    $function: $component;\n\n    @if function-exists('get-function') {\n      $function: get-function($component);\n    }\n\n    $value: call($function, $color) / 255;\n\n    @if ($value < 0.03928) {\n      $value: $value / 12.92;\n    } @else {\n      $base: ($value + 0.055) / 1.055;\n      $value: _a_pow($base, 2.4);\n    }\n\n    @if ($component == 'red') {\n      $value: $value * 0.2126;\n    } @else if ($component == 'green') {\n      $value: $value * 0.7152;\n    } @else {\n      $value: $value * 0.0722;\n    }\n\n    $luminance: $luminance + $value;\n  }\n\n  @return $luminance;\n}\n\n\n// Default Contrast\n// ----------------\n/// Access the user or system default contrast values.\n///\n/// @access private\n/// @since 2.1.0 -\n/// - NEW: Allows for either private or public defaults\n///\n/// @param {'light' | 'dark' | 'values' | 'map'} $return -\n///   Return the light value, dark value, both values, or a map\n/// @return {color-name | map} -\n///   Light or dark color-name string,\n///   or map with `light` and `dark` keys.\n@function _a_default-contrast(\n  $return: 'both'\n) {\n  $both: (\n    'light': if(\n      map-has-key($colors, 'contrast-light'),\n      'contrast-light',\n      '_contrast-light'\n    ),\n    'dark': if(\n      map-has-key($colors, 'contrast-dark'),\n      'contrast-dark',\n      '_contrast-dark'\n    ),\n  );\n\n  @if ($return == 'values') {\n    @return map-values($both);\n  }\n\n  @return map-get($both, $return) or $both;\n}\n\n\n// Best Contrast\n// -------------\n/// For any color, select the best contrast among a set of options.\n/// Returns the highest contrast by default,\n/// or the minimum contrast to meet a particular ratio cutoff.\n///\n/// Unlike the `contrast` function,\n/// `_a_best-contrast` can return the color name,\n/// output value, ratio, or all three.\n///\n/// @access private\n/// @since 2.1.0 -\n/// - NEW: Provides access to both name and value of result\n/// - NEW: Provides a smart default for comparison against a single option\n///\n/// @param {string | list} $color -\n///   The name or value of a color.\n/// @param {list} $options [null] -\n///   Any number of colors to contrast against.\n///   This function will choose the best contrast of all the options provided,\n///   or use the `contrast-light` and `contrast-dark` defaults.\n/// @param {'map' | 'name' | 'color' | 'ratio'} $return ['map'] -\n///   Return either a token name, color value, best-ratio\n///   or all three together in a map.\n/// @return {color} -\n///   Whichever color-option has the highest contrast-ratio to `$color`.\n@function _a_best-contrast(\n  $color,\n  $options: null,\n  $return: 'map'\n) {\n  $opt-colors: ();\n  $min-ratio: false;\n\n  @each $opt in $options {\n    @if (type-of($opt) == 'color') or map-has-key($colors, $opt) {\n      $opt-colors: append($opt-colors, $opt);\n    } @else {\n      $min-ratio: _a_valid-contrast($opt) or $min-ratio;\n    }\n  }\n\n  // Establish default options if they are missing\n  @if (length($opt-colors) == 0) or (not $opt-colors) {\n    $opt-colors: _a_default-contrast('values');\n  } @else if (length($opt-colors) == 1 ){\n    $use: _a_best-contrast(nth($opt-colors, 1), $return: 'name');\n    $opt-colors: append($opt-colors, $use);\n  }\n\n  // Get the colors and their contrasts\n  $color-val: color($color);\n  $color-lum: luminance($color-val);\n  $best: (\n    'name': null,\n    'color': null,\n    'ratio': null,\n  );\n\n  @each $name in $opt-colors {\n    // 22 is above the highest possible, 0 is below the lowest\n    $best-ratio: map-get($best, 'ratio') or if($min-ratio, 22, 0);\n    $better: false;\n    $value: color($name);\n    $lum: luminance($value);\n    $ratio: contrast-ratio($color-lum, $lum, $min-ratio);\n\n    @if $min-ratio and $ratio {\n      $better: ($ratio < $best-ratio);\n    } @else if $ratio {\n      $better: ($ratio > $best-ratio);\n    }\n\n    @if $better {\n      $best: (\n        'name': $name,\n        'color': $value,\n        'ratio': $ratio,\n      );\n    }\n  }\n\n  @if (map-get($best, 'name')) {\n    @return map-get($best, $return) or $best;\n  }\n\n  @return false;\n}\n\n\n// Valid Contrast\n// --------------\n/// Return a valid contrast ratio or `false`\n///\n/// @access private\n/// @param {'AA' | 'AA-large' | 'AAA' | 0-21} $ratio -\n///   WCAG or 0-21 contrast ratios will pass validation,\n///   all other values will return false\n@function _a_valid-contrast(\n  $ratio\n) {\n  @if (type-of($ratio) == 'number') and ($ratio >= 1) and ($ratio <= 21) {\n    @return $ratio;\n  }\n\n  $uppercase: (\n    'aaa': 'AAA',\n    'aa': 'AA',\n    'aa-large': 'AA-large'\n  );\n\n  $ratio: map-get($uppercase, $ratio) or $ratio;\n  @return map-get($WCAG-CONTRAST, $ratio);\n}\n"]}